package models;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import enums.Gender;
import enums.TypeArbitrator;
import enums.TypeDocument;
import enums.TypeState;
import exceptions.DocumentNotFoundException;


public class ChampionLigueBasketball implements OperatorsLigueInterface{
	public static final int AUTOGENERATED= 1004910000;
	public static final int AUTOGENERATED2= 0000;
	private List<Team> teamList;
	private List<Arbitrator> arbitratorList;
	private List<Game> gamesList;
	public static int position = 0;
	
	public ChampionLigueBasketball() {
		teamList = new ArrayList<>();
		arbitratorList = new ArrayList<>();
		gamesList = new ArrayList<>();
	}
	
	public void addTeam(Team team) {
		teamList.add(team);
	}
	
	public static Team createTeam(String name, String identification, TypeState state) {
		return new Team(generateID(), name, identification, state);
	}
	
	public void addPlayer(String identification, Player player ) throws DocumentNotFoundException {
		searchTeam(identification).add(player);
	}
	
	public static Arbitrator createArbitrator(String firstName, String lastName, TypeDocument typeDocument, String documentNumber,
			LocalDate date, Gender gender, TypeArbitrator typeArbitrator) {
		return new Arbitrator(firstName, lastName, typeDocument, documentNumber, date, gender, generateIDArbitrator(), typeArbitrator);
	}
	
	private static int generateIDArbitrator() {
		int aux = AUTOGENERATED2;
		return ++aux;
	}

	public ArrayList<Object[]> toMatrixVector(){
		ArrayList<Object[]> datas = new ArrayList<>();
		for (Team team: teamList) {
			for (Object[] datasTeam : team.toMatrixVector()) {
				datas.add( datasTeam );				
			}
		}
		return datas;
	}
	
	public Team searchTeam(String identification) throws DocumentNotFoundException {
		for (Team team : teamList) {
			if (team.getIdentification().equalsIgnoreCase(identification)) {
				return team;
			}
		}
		throw new DocumentNotFoundException();
	}
	
	public void deleteTeam(String identification) throws DocumentNotFoundException {
		teamList.remove(searchPositionTeam(identification));
	}
	
	public int searchPositionTeam( String numberDocument ) throws DocumentNotFoundException{
		for (int i = 0; i < teamList.size(); i++) {
			if(teamList.get(i).getIdentification().equalsIgnoreCase(numberDocument)) {
				return i;
			}
		}
		throw new DocumentNotFoundException();
	}
	
	public void editIdentificationTeam(String identification, String newIdentification) {
		for (int i = 0; i < teamList.size(); i++) {
			if (identification.equals(teamList.get(i).getIdentification())) {
				teamList.get(i).setIdentification(newIdentification);
			}
		}
	}
	
	public void editNameTeam(String identification, String name) {
		for (int i = 0; i < teamList.size(); i++) {
			if (identification.equals(teamList.get(i).getIdentification())) {
				teamList.get(i).setName(name);
			}
		}
	}
	
	public void replaceTeam(int pos, Team team) {
		teamList.set(pos, team);
	}

	public void add(Person person) {
		arbitratorList.add((Arbitrator) person);
	}

	public Person search(String documentNumber) throws DocumentNotFoundException {
		for (Arbitrator arbitrator : arbitratorList) {
			if(arbitrator.getDocumentNumber().equals(documentNumber)) {
				return arbitrator;
			}
		}
		throw new DocumentNotFoundException();
	}

	public void delete(String documentNumber) throws DocumentNotFoundException {
		arbitratorList.remove(search(documentNumber));
	}

	public void replace(int pos, Person person) {
		arbitratorList.set(pos, (Arbitrator) person);
	}

	public void editTypeDocument(String documentNumber, TypeDocument newDocumentType) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setTypeDocument(newDocumentType);
			}
		}
	}
	
	public void editTypeArbitrator(String documentNumber, TypeArbitrator newPosition) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setTypeArbitrator(newPosition);
			}
		}
	}
	
	
	public void editBirthdate(String documentNumber, LocalDate birthdate) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setBirthdate(birthdate);;
			}
		}
	}
	
	public void editDocumentNumber(String documentNumber, String newNumberDocument) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setDocumentNumber(newNumberDocument);
			}
		}
	}
	
	public void editFirstName(String documentNumber, String name) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setFirstName(name);
			}
		}
	}
	
	public void editSurname(String documentNumber, String surname) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setLastName(surname);
			}
		}
	}
	
	public void editGender(String documentNumber, Gender genderChange) {
		for (int i = 0; i < arbitratorList.size(); i++) {
			if (documentNumber.equals(arbitratorList.get(i).getDocumentNumber())) {
				arbitratorList.get(i).setGender(genderChange);
			}
		}
	}
	
	public static int generateID() {
		int aux = AUTOGENERATED;
			return ++aux;
	}

	public void addGame(Game game) {
		gamesList.add(game);
	}
}
